@namespace("org.wikimedia.analytics.schemas")
protocol CirrusSearchLogging {

  /** An individual search result */
  record CirrusSearchHit {
    /** MediaWiki page title of the result */
    string title = "";
    /** ElasticSearch index this result came from */
    string index = "";
    /* MediaWiki page id. May be -1 for interwiki results */
    int pageId = -1;
    /** Score from ElasticSearch for this result */
    float score = -1;
	/** The profile name for comp_suggest queries */
	string profileName = "";
  }

  /** An individual request made between MediaWiki and ElasticSearch */
  record CirrusSearchRequest {
    /** The actual search request */
    string query = "";
    /* The general type of query performed, such as full_text, prefix, etc. */
    string queryType = "";
    /* The list of indices the request was performed against */
    array<string> indices = [];
    /** The number of milliseconds between passing the query to the client library and getting the response back in the application */
    int tookMs = -1;
    /** The number of milliseconds the query took, according to the elasticsearch response */
    int elasticTookMs = -1;
    /** The maximum number of results requested by the application */
    int limit = -1;
    /** The approximate total number of documents matching the query */
    int hitsTotal = -1;
    /** The number of results returned to the application */
    int hitsReturned = -1;
    /** The offset of the query */
    int hitsOffset = -1;
    /** Each element is a mediawiki namespace id that was searched */
    array<int> namespaces = [];
    /** The suggestion generated by elasticsearch */
    string suggestion = "";
    /** If a suggestion was requested from elasticsearch */
    boolean suggestionRequested = false;
	/** Max score returned by elasticsearch, this is the best score in the
     * results before we apply rescore queries.  Unfortunaltely we do not know if
     * it's part or the result but it can give a rough idea of the score range
     * before we apply the rescore queries.
	 */
	float maxScore = -1.0;
    /** General purpose data for this request */
    map<string> payload = {};
    /** Final set of result pages returned for the ElasticSearch request */
    array<CirrusSearchHit> hits = [];
  }

  /** A set of requests made by CirrusSearch to the elasticsearch user for a single php execution context */
  record CirrusSearchRequestSet {
    /** UUIDv4 id of this request set */
    string id = "";
    /** The timestamp, in unix time, that the request was made */
    int ts = 0;
    /** The wiki making this request, such as dewiki or enwiktionary */
    string wikiId = "";
    /** Where the request is coming from. Typically: web, api or cli */
    string source = "";
    /** A hash identifying the requestor. Includes the IP address and User Agent when available */
    string identity = "";
    /** The IP address (either ipv4 or ipv6) in string notation */
    string ip = "";
    /** The HTTP User-Agent header, or null if not-applicable */
    string userAgent = "";
    /** List of backend tests the requests are participating in */
    array<string> backendUserTests = [];
    /** Total time of the php request in milliseconds */
    float tookMs = -1;
    /** General purpose data for this request set */
    map<string> payload = {};
    /** Final set of result pages returned for the php request. */
    array<CirrusSearchHit> hits = [];
    /** A list of requests made between mediawiki and elasticsearch in a single execution context */
    array<CirrusSearchRequest> requests = [];
  }

}
